cmake_minimum_required (VERSION 3.2)
set (CMAKE_BUILD_TYPE "Release" CACHE STRING "build type")
project (wrapper C)
if (POLICY CMP0091)
  cmake_policy (SET CMP0091 NEW)
endif()
add_library (cwrapper1 STATIC wrapper1.c)
set_target_properties (cwrapper1 PROPERTIES POSITION_INDEPENDENT_CODE ON MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
set_target_properties (cwrapper1 PROPERTIES ARCHIVE_OUTPUT_DIRECTORY_RELEASE ${CMAKE_BINARY_DIR} LIBRARY_OUTPUT_DIRECTORY_RELEASE ${CMAKE_BINARY_DIR} RUNTIME_OUTPUT_DIRECTORY_RELEASE ${CMAKE_BINARY_DIR})
if (MSVC)
  target_compile_definitions(cwrapper1 PRIVATE _CRT_SECURE_NO_WARNINGS)
endif()

add_library (cwrapper2 STATIC wrapper2.c)
set_target_properties (cwrapper2 PROPERTIES POSITION_INDEPENDENT_CODE ON MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
set_target_properties (cwrapper2 PROPERTIES ARCHIVE_OUTPUT_DIRECTORY_RELEASE ${CMAKE_BINARY_DIR} LIBRARY_OUTPUT_DIRECTORY_RELEASE ${CMAKE_BINARY_DIR} RUNTIME_OUTPUT_DIRECTORY_RELEASE ${CMAKE_BINARY_DIR})
if (MSVC)
  target_compile_definitions(cwrapper2 PRIVATE _CRT_SECURE_NO_WARNINGS)
endif()


find_package (PythonLibs 3.2)
add_library (cwrapper3 SHARED wrapper3.c)
target_include_directories(cwrapper3 PRIVATE ${PYTHON_INCLUDE_DIRS})
target_link_libraries(cwrapper3 PRIVATE ${PYTHON_LIBRARIES})
set_target_properties (cwrapper3 PROPERTIES POSITION_INDEPENDENT_CODE ON MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
set_target_properties (cwrapper3 PROPERTIES ARCHIVE_OUTPUT_DIRECTORY_RELEASE ${CMAKE_BINARY_DIR} LIBRARY_OUTPUT_DIRECTORY_RELEASE ${CMAKE_BINARY_DIR} RUNTIME_OUTPUT_DIRECTORY_RELEASE ${CMAKE_BINARY_DIR})
if (MSVC)
  target_compile_definitions(cwrapper3 PRIVATE _CRT_SECURE_NO_WARNINGS)
endif()
